@page "/"
@inject Tauri Tauri

<main class="container">
    <h1>Welcome to Tauri + Blazor</h1>

    <div class="row">
        <a href="https://tauri.app" target="_blank">
            <img src="img/tauri.svg" class="logo tauri" alt="Tauri logo"/>
        </a>
        <a href="https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor" target="_blank">
            <img src="img/blazor.png" class="logo blazor" alt="Blazor logo"/>
        </a>
    </div>
    <p>Click on the Tauri and Blazor logos to learn more.</p>

    <form class="row" @onsubmit="GreetAsync" @onsubmit:preventDefault="true">
        <input id="greet-input" placeholder="Enter a name..." @bind="GreetInput"/>
        <button type="submit">Greet</button>
    </form>
    <p>@GreetMsg</p>
    @if (_isTauri)
    {
        <div style="color: #535bf2; cursor: pointer;" @onclick="OpenDemoWindow">see more examples</div>
    }
</main>

@code
{
    private string? GreetInput { get; set; }

    private string? GreetMsg { get; set; }

    private bool _isTauri;

    private async Task GreetAsync()
    {
        if (!_isTauri)
        {
            GreetMsg = "Tauri is not available. Please run this app in a Tauri environment.";
        }
        else
        {
            GreetMsg = await Tauri.Core.Invoke<string>("greet", new { name = GreetInput });
        }
    }

    private async Task OpenDemoWindow()
    {
        var window = await Tauri.WebviewWindow.CreateWebviewWindow("examples", 
            new WindowOptions
            {
                Width = 400,
                Height = 300,
                TitleBarStyle = TitleBarStyle.Transparent,
            },
            new WebviewOptions
            {
                Url = "/Demo",
            });
        await window.Center();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isTauri = await Tauri.Core.IsTauri();
            Console.WriteLine($"Is Tauri: {_isTauri}");
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }


}
